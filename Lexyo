# Module LMNP réel pour CleanPro
# Codé en Python, prêt à brancher

from dataclasses import dataclass
import numpy as np
import pandas as pd

@dataclass
class InputsLMNPReel:
    prix_bien: float
    apport: float
    travaux: float
    frais_agence: float
    frais_dossier: float
    frais_tiers: float
    mobilier: float
    frais_garantie: float
    duree: int
    differe: int
    taux_credit: float
    taux_assurance: float
    charges_copro: float
    assurance_habitation: float
    assurance_gli: float
    taxe_fonciere: float
    entretien: float
    comptabilite: float
    frais_bancaires: float
    loyer_hc: float
    vacance_locative: float
    tmi: float

class LMNPReel:
    def __init__(self, inputs: InputsLMNPReel):
        self.i = inputs
        self.resultats = {}
        self.calculs_intermediaires()
        self.genere_tableau_projection()

    def calculs_intermediaires(self):
        self.frais_notaire = 0.08 * self.i.prix_bien
        self.total_frais = sum([
            self.frais_notaire,
            self.i.frais_agence,
            self.i.frais_dossier,
            self.i.travaux,
            self.i.frais_tiers,
            self.i.mobilier,
            self.i.frais_garantie
        ])
        self.montant_emprunt = self.i.prix_bien + self.total_frais - self.i.apport
        self.taux_mensuel = self.i.taux_credit / 12
        self.assurance_mensuelle = self.i.taux_assurance / 12 * self.montant_emprunt

        if self.i.differe > 0:
            self.mensualite = np.pmt(self.taux_mensuel, self.i.duree * 12 - self.i.differe, -self.montant_emprunt)
        else:
            self.mensualite = np.pmt(self.taux_mensuel, self.i.duree * 12, -self.montant_emprunt)

    def genere_tableau_projection(self):
        duree = 10
        tableau = []
        capital_restant = self.montant_emprunt
        amortissement_bien = (self.i.prix_bien - self.frais_notaire) / 30
        amortissement_mobilier = self.i.mobilier / 7

        for annee in range(1, duree + 1):
            interets_annuels = 0
            capital_rembourse_annuel = 0
            mensualites = []

            for mois in range(1, 13):
                idx = (annee - 1) * 12 + mois
                if idx <= self.i.differe:
                    interets = capital_restant * self.taux_mensuel
                    capital_rembourse = 0
                else:
                    interets = capital_restant * self.taux_mensuel
                    capital_rembourse = self.mensualite - interets
                    capital_restant -= capital_rembourse

                interets_annuels += interets
                capital_rembourse_annuel += capital_rembourse
                mensualites.append(self.mensualite + self.assurance_mensuelle)

            loyer_annualise = self.i.loyer_hc * (12 - self.i.vacance_locative)
            charges = sum([
                self.i.charges_copro,
                self.i.assurance_habitation,
                self.i.assurance_gli,
                self.i.taxe_fonciere,
                self.i.entretien,
                self.i.comptabilite,
                self.i.frais_bancaires
            ])
            amortissements = amortissement_bien + amortissement_mobilier
            resultat_net = loyer_annualise - interets_annuels - charges - amortissements

            if resultat_net > 0:
                impot = resultat_net * self.i.tmi
                deficit = 0
            else:
                impot = 0
                deficit = resultat_net

            cashflow = loyer_annualise - charges - interets_annuels - sum(mensualites)

            tableau.append({
                "Année": annee,
                "Loyer": round(loyer_annualise),
                "Charges": round(charges),
                "Intérêts": round(interets_annuels),
                "Amortissements": round(amortissements),
                "Résultat Net": round(resultat_net),
                "Impôt": round(impot),
                "Déficit": round(deficit),
                "Cashflow": round(cashflow)
            })

        self.df = pd.DataFrame(tableau)

    def get_projection(self):
        return self.df

# Exemple d'utilisation
if __name__ == "__main__":
    inputs = InputsLMNPReel(
        prix_bien=200000,
        apport=20000,
        travaux=10000,
        frais_agence=5000,
        frais_dossier=1000,
        frais_tiers=1000,
        mobilier=5000,
        frais_garantie=1500,
        duree=20,
        differe=6,
        taux_credit=0.03,
        taux_assurance=0.003,
        charges_copro=1000,
        assurance_habitation=300,
        assurance_gli=400,
        taxe_fonciere=1200,
        entretien=500,
        comptabilite=700,
        frais_bancaires=200,
        loyer_hc=1000,
        vacance_locative=1,
        tmi=0.30
    )

    lmnp = LMNPReel(inputs)
    print(lmnp.get_projection())
